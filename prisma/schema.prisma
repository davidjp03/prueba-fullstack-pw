generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ========== AUTH MODELS ==========
model User {
  id            String      @id
  name          String
  email         String      @unique
  emailVerified Boolean
  image         String?
  role          Role        @default(ADMIN) // Nuevo campo para el RBAC
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  movements     Movement[]  // Relaci√≥n con movimientos

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String   @id
  accountId             String
  providerId            String
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//
// ========== BUSINESS MODELS ==========
//

/// Modelo para registrar ingresos y egresos
model Movement {
  id        String    @id @default(cuid())
  concept   String
  amount    Decimal   @db.Decimal(10, 2)
  type      MovementType
  date      DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("movement")
}

//
// ========== ENUMS ==========
//

/// Enum para roles de usuario
enum Role {
  ADMIN
  USER
}

/// Enum para tipo de movimiento financiero
enum MovementType {
  INCOME
  EXPENSE
}
